// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/walkersumida/aws-sso-google/saml"
	"sync"
)

// Ensure, that SAMLerMock does implement saml.SAMLer.
// If this is not the case, regenerate this file with moq.
var _ saml.SAMLer = &SAMLerMock{}

// SAMLerMock is a mock implementation of saml.SAMLer.
//
//	func TestSomethingThatUsesSAMLer(t *testing.T) {
//
//		// make and configure a mocked saml.SAMLer
//		mockedSAMLer := &SAMLerMock{
//			SigninFunc: func() (*saml.Response, error) {
//				panic("mock out the Signin method")
//			},
//		}
//
//		// use mockedSAMLer in code that requires saml.SAMLer
//		// and then make assertions.
//
//	}
type SAMLerMock struct {
	// SigninFunc mocks the Signin method.
	SigninFunc func() (*saml.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Signin holds details about calls to the Signin method.
		Signin []struct {
		}
	}
	lockSignin sync.RWMutex
}

// Signin calls SigninFunc.
func (mock *SAMLerMock) Signin() (*saml.Response, error) {
	if mock.SigninFunc == nil {
		panic("SAMLerMock.SigninFunc: method is nil but SAMLer.Signin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSignin.Lock()
	mock.calls.Signin = append(mock.calls.Signin, callInfo)
	mock.lockSignin.Unlock()
	return mock.SigninFunc()
}

// SigninCalls gets all the calls that were made to Signin.
// Check the length with:
//
//	len(mockedSAMLer.SigninCalls())
func (mock *SAMLerMock) SigninCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSignin.RLock()
	calls = mock.calls.Signin
	mock.lockSignin.RUnlock()
	return calls
}
