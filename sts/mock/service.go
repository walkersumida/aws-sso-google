// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/walkersumida/aws-sso-google/sts"
	"sync"
)

// Ensure, that STSerMock does implement sts.STSer.
// If this is not the case, regenerate this file with moq.
var _ sts.STSer = &STSerMock{}

// STSerMock is a mock implementation of sts.STSer.
//
//	func TestSomethingThatUsesSTSer(t *testing.T) {
//
//		// make and configure a mocked sts.STSer
//		mockedSTSer := &STSerMock{
//			AssumeRoleWithSAMLFunc: func() (*sts.Response, error) {
//				panic("mock out the AssumeRoleWithSAML method")
//			},
//			SetPrincipalArnFunc: func(s string)  {
//				panic("mock out the SetPrincipalArn method")
//			},
//			SetSAMLAssertionFunc: func(s string)  {
//				panic("mock out the SetSAMLAssertion method")
//			},
//		}
//
//		// use mockedSTSer in code that requires sts.STSer
//		// and then make assertions.
//
//	}
type STSerMock struct {
	// AssumeRoleWithSAMLFunc mocks the AssumeRoleWithSAML method.
	AssumeRoleWithSAMLFunc func() (*sts.Response, error)

	// SetPrincipalArnFunc mocks the SetPrincipalArn method.
	SetPrincipalArnFunc func(s string)

	// SetSAMLAssertionFunc mocks the SetSAMLAssertion method.
	SetSAMLAssertionFunc func(s string)

	// calls tracks calls to the methods.
	calls struct {
		// AssumeRoleWithSAML holds details about calls to the AssumeRoleWithSAML method.
		AssumeRoleWithSAML []struct {
		}
		// SetPrincipalArn holds details about calls to the SetPrincipalArn method.
		SetPrincipalArn []struct {
			// S is the s argument value.
			S string
		}
		// SetSAMLAssertion holds details about calls to the SetSAMLAssertion method.
		SetSAMLAssertion []struct {
			// S is the s argument value.
			S string
		}
	}
	lockAssumeRoleWithSAML sync.RWMutex
	lockSetPrincipalArn    sync.RWMutex
	lockSetSAMLAssertion   sync.RWMutex
}

// AssumeRoleWithSAML calls AssumeRoleWithSAMLFunc.
func (mock *STSerMock) AssumeRoleWithSAML() (*sts.Response, error) {
	if mock.AssumeRoleWithSAMLFunc == nil {
		panic("STSerMock.AssumeRoleWithSAMLFunc: method is nil but STSer.AssumeRoleWithSAML was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAssumeRoleWithSAML.Lock()
	mock.calls.AssumeRoleWithSAML = append(mock.calls.AssumeRoleWithSAML, callInfo)
	mock.lockAssumeRoleWithSAML.Unlock()
	return mock.AssumeRoleWithSAMLFunc()
}

// AssumeRoleWithSAMLCalls gets all the calls that were made to AssumeRoleWithSAML.
// Check the length with:
//
//	len(mockedSTSer.AssumeRoleWithSAMLCalls())
func (mock *STSerMock) AssumeRoleWithSAMLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAssumeRoleWithSAML.RLock()
	calls = mock.calls.AssumeRoleWithSAML
	mock.lockAssumeRoleWithSAML.RUnlock()
	return calls
}

// SetPrincipalArn calls SetPrincipalArnFunc.
func (mock *STSerMock) SetPrincipalArn(s string) {
	if mock.SetPrincipalArnFunc == nil {
		panic("STSerMock.SetPrincipalArnFunc: method is nil but STSer.SetPrincipalArn was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetPrincipalArn.Lock()
	mock.calls.SetPrincipalArn = append(mock.calls.SetPrincipalArn, callInfo)
	mock.lockSetPrincipalArn.Unlock()
	mock.SetPrincipalArnFunc(s)
}

// SetPrincipalArnCalls gets all the calls that were made to SetPrincipalArn.
// Check the length with:
//
//	len(mockedSTSer.SetPrincipalArnCalls())
func (mock *STSerMock) SetPrincipalArnCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetPrincipalArn.RLock()
	calls = mock.calls.SetPrincipalArn
	mock.lockSetPrincipalArn.RUnlock()
	return calls
}

// SetSAMLAssertion calls SetSAMLAssertionFunc.
func (mock *STSerMock) SetSAMLAssertion(s string) {
	if mock.SetSAMLAssertionFunc == nil {
		panic("STSerMock.SetSAMLAssertionFunc: method is nil but STSer.SetSAMLAssertion was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetSAMLAssertion.Lock()
	mock.calls.SetSAMLAssertion = append(mock.calls.SetSAMLAssertion, callInfo)
	mock.lockSetSAMLAssertion.Unlock()
	mock.SetSAMLAssertionFunc(s)
}

// SetSAMLAssertionCalls gets all the calls that were made to SetSAMLAssertion.
// Check the length with:
//
//	len(mockedSTSer.SetSAMLAssertionCalls())
func (mock *STSerMock) SetSAMLAssertionCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetSAMLAssertion.RLock()
	calls = mock.calls.SetSAMLAssertion
	mock.lockSetSAMLAssertion.RUnlock()
	return calls
}
